<?php

/**
 * @file
 * Primary module hooks for ID4me module.
 */

use Id4me\RP\Model\ClaimRequest;
use Id4me\RP\Model\ClaimRequestList;
use Id4me\RP\Service;

/**
 * Implements hook_menu().
 */
function id4me_menu() {
  $items['id4me/authorize'] = [
    'title' => 'Authorize',
    'page callback' => 'id4me_authorize',
    'access callback' => 'id4me_authorize_access',
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implements hook_block_info.
 */
function id4me_block_info() {
  // This example comes from node.module.
  $blocks['id4me_login'] = array(
    'info' => t('ID4me login'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view.
 */
function id4me_block_view($delta = '') {
  global $user;

  $block = array();
  switch ($delta) {
    case 'id4me_login':
      // For usability's sake, avoid showing two login forms on one page.
      if (!$user->uid && !(arg(0) == 'user' && !is_numeric(arg(1)))) {
        $block['subject'] = t('ID4me login');
        $block['content'] = drupal_get_form('id4me_login_form');
      }
      break;
  }
  return $block;
}

/**
 * ID4me login block.
 */
function id4me_login_form($form, &$form_state) {
  $form['identifier'] = [
    '#type' => 'textfield',
    '#title' => t('Identifier'),
    '#required' => TRUE,
    '#size' => 15,
  ];
  $form['actions'] = [
    '#type' => 'actions',
  ];
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Login'),
  ];
  return $form;
}

/**
 * ID4me login block.
 */
function id4me_login_form_submit($form, &$form_state) {
  $identifier = $form_state['values']['identifier'];

  $id4me = new Service(new HttpClient());
  $authority_name = $id4me->discover($identifier);
  $openid_config = $id4me->getOpenIdConfig($authority_name);
  $client = $id4me->register($openid_config, $identifier, url('id4me/authorize', ['absolute' => TRUE]));

  $state = StateToken::create();
  $_SESSION['id4me_' . $state] = [
    'authorityName' => $authority_name,
    'client' => serialize($client),
    'identifier' => $identifier,
    'openidConfig' => serialize($openid_config),
  ];

  $authorization_url = $id4me->getAuthorizationUrl(
    $openid_config,
    $client->getClientId(),
    $identifier,
    $client->getActiveRedirectUri(),
    $state,
    NULL,
    new ClaimRequestList(
      new ClaimRequest('preferred_username', TRUE, 'To initiate a local account'),
      new ClaimRequest('email', TRUE, 'To initiate a local account')
    )
  );

  drupal_goto($authorization_url);
}

/**
 * Authorize access callback.
 *
 * @return bool
 */
function id4me_authorize_access() {
  $params = drupal_get_query_parameters();
  $state_token = isset($params['state']) ? $params['state'] : NULL;
  if ($state_token && StateToken::confirm($state_token)) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Authorize page callback.
 */
function id4me_authorize() {
  global $user;
  $query = drupal_get_query_parameters();

  if (!isset($query['error']) && !isset($query['code'])) {
    // In case we don't have an error, but the client could not be loaded or
    // there is no state token specified, the URI is probably being visited
    // outside of the login flow.
    return FALSE;
  }

  if (isset($query['error'])) {
    if (in_array($query['error'], [
      'interaction_required',
      'login_required',
      'account_selection_required',
      'consent_required',
    ])) {
      // If we have an one of the above errors, that means the user hasn't
      // granted the authorization for the claims.
      drupal_set_message(t('Logging in with Id4me has been canceled.'), 'warning');
    }
    else {
      // Any other error should be logged. E.g. invalid scope.
      $variables = [
        '@error' => $query['error'],
        '@details' => $query['error_description'] ? $query['error_description'] : t('Unknown error.'),
      ];
      $message = 'Authorization failed: @error. Details: @details';
      watchdog(WATCHDOG_ERROR, $message, $variables);
      drupal_set_message(t('Could not authenticate with Id4me.'), 'warning');
    }
  }
  else {
    // Process the login or connect operations.
    $state = $query['state'];
    $code = $query['code'];
    $openid_config = unserialize($_SESSION['id4me_' . $state]['openidConfig']);
    $client = unserialize($_SESSION['id4me_' . $state]['client']);

    $id4me = new Service(new HttpClient());
    $authorization_tokens = $id4me->getAuthorizationTokens($openid_config, $code, $client);
    $user_info = $id4me->getUserInfo($openid_config, $client, $authorization_tokens);

    $authmap = new Authmap();
    $account = $authmap->userLoadBySub($user_info->getSub(), 'id4me');
    if (user_is_logged_in() || !$account) {
      $account = user_save(NULL, [
        'name' => $user_info->getPreferredUsername(),
        'mail' => $user_info->getEmail(),
        'status' => 1,
        'init' => $user_info->getEmail(),
      ]);
      $authmap->createAssociation($account, 'id4me', $user_info->getSub());
      // Reload $account in case it has been altered in a user hook elsewhere.
      $user = user_load($account->uid);
      user_login_finalize();
    }
    elseif ($account) {
      $user = $account;
      user_login_finalize();
    }
  }
  drupal_goto();
}

/**
 * Returns a URL-safe, base64 encoded string of highly randomized bytes.
 *
 * @param $count
 *   The number of random bytes to fetch and base64 encode.
 *
 * @return string
 *   The base64 encoded result will have a length of up to 4 * $count.
 *
 * @throws Exception
 */
function random_bytes_base64($count = 32) {
  return str_replace(['+', '/', '='], ['-', '_', ''], base64_encode(random_bytes($count)));
}
